{"ast":null,"code":"import querystring from 'querystring';\nexport async function conectSpotifyWithCode(callbackUrl, code, base64ClientIdSecrect) {\n  return await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Basic ' + Buffer(base64ClientIdSecrect).toString('base64'),\n      'Content-Type': \"application/x-www-form-urlencoded\"\n    },\n    body: new URLSearchParams({\n      grant_type: 'authorization_code',\n      code: code,\n      redirect_uri: callbackUrl\n    })\n  }).then(response => response.json()).then(json => {\n    return json;\n  });\n}\nexport function loginSpotify(clientId, callbackUrl) {\n  window.location.href = 'https://accounts.spotify.com/authorize?' + querystring.stringify({\n    response_type: 'code',\n    client_id: clientId,\n    scope: 'user-read-private user-read-email',\n    redirect_uri: callbackUrl\n  });\n}\nexport async function getInfosUserSpotify(access_token) {\n  return await fetch('https://api.spotify.com/v1/me', {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + access_token,\n      'Content-Type': \"application/json\"\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/client-IA-emotions/aiemotions/client/src/services/spotifyService.js"],"names":["querystring","conectSpotifyWithCode","callbackUrl","code","base64ClientIdSecrect","fetch","method","headers","Buffer","toString","body","URLSearchParams","grant_type","redirect_uri","then","response","json","loginSpotify","clientId","window","location","href","stringify","response_type","client_id","scope","getInfosUserSpotify","access_token"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,aAAxB;AAEA,OAAO,eAAeC,qBAAf,CAAqCC,WAArC,EAAkDC,IAAlD,EAAwDC,qBAAxD,EAA8E;AACjF,SAAO,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACzDC,IAAAA,MAAM,EAAE,MADiD;AAEzDC,IAAAA,OAAO,EAAE;AACL,uBAAiB,WAASC,MAAM,CAACJ,qBAAD,CAAN,CAA8BK,QAA9B,CAAuC,QAAvC,CADrB;AAEL,sBAAgB;AAFX,KAFgD;AAMzDC,IAAAA,IAAI,EAAE,IAAIC,eAAJ,CAAoB;AACtBC,MAAAA,UAAU,EAAE,oBADU;AAEtBT,MAAAA,IAAI,EAAEA,IAFgB;AAGtBU,MAAAA,YAAY,EAAEX;AAHQ,KAApB;AANmD,GAA3C,CAAL,CAYZY,IAZY,CAYPC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAZL,EAaZF,IAbY,CAaPE,IAAI,IAAI;AACV,WAAOA,IAAP;AACH,GAfY,CAAb;AAgBH;AAED,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAAgChB,WAAhC,EAA4C;AAC/CiB,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,4CACvBrB,WAAW,CAACsB,SAAZ,CAAsB;AAClBC,IAAAA,aAAa,EAAE,MADG;AAElBC,IAAAA,SAAS,EAACN,QAFQ;AAGlBO,IAAAA,KAAK,EAAE,mCAHW;AAIlBZ,IAAAA,YAAY,EAAEX;AAJI,GAAtB,CADA;AAOH;AAED,OAAO,eAAewB,mBAAf,CAAmCC,YAAnC,EAAgD;AACnD,SAAO,MAAMtB,KAAK,CAAC,+BAAD,EAAkC;AAChDC,IAAAA,MAAM,EAAE,KADwC;AAEhDC,IAAAA,OAAO,EAAE;AACL,uBAAiB,YAAUoB,YADtB;AAEL,sBAAgB;AAFX;AAFuC,GAAlC,CAAlB;AAOH","sourcesContent":["import querystring from 'querystring'\r\n\r\nexport async function conectSpotifyWithCode(callbackUrl, code, base64ClientIdSecrect){\r\n    return await fetch('https://accounts.spotify.com/api/token', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Basic '+Buffer(base64ClientIdSecrect).toString('base64'),\r\n            'Content-Type': \"application/x-www-form-urlencoded\",\r\n        },\r\n        body: new URLSearchParams({\r\n            grant_type: 'authorization_code',\r\n            code: code,\r\n            redirect_uri: callbackUrl\r\n        })\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => {\r\n        return json\r\n    })\r\n}\r\n\r\nexport function loginSpotify(clientId, callbackUrl){\r\n    window.location.href = 'https://accounts.spotify.com/authorize?'+\r\n    querystring.stringify({\r\n        response_type: 'code',\r\n        client_id:clientId,\r\n        scope: 'user-read-private user-read-email', \r\n        redirect_uri: callbackUrl\r\n    })\r\n}\r\n\r\nexport async function getInfosUserSpotify(access_token){\r\n    return await fetch('https://api.spotify.com/v1/me', {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer '+access_token,\r\n            'Content-Type': \"application/json\",\r\n        },\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}